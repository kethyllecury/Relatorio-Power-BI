import requests
import pandas as pd
import time
import base64
import json

CLIENT_ID = "e54144a5b51c3c931133d95ba48c1698a766afec"
CLIENT_SECRET = "d590501ad197808124178928e3e655d79554d8a9ed53861444250e25fedf"
REDIRECT_URI = "https://www.zerofuro.com.br/"
AUTHENTICATION_CODE = ""
ACCESS_TOKEN = ""
REFRESH_TOKEN = ""
TESTE = False


def log(msg):
    global TESTE

    if TESTE:
        print(msg)

def get_keys():
    response = requests.get("https://bling-2d3ac-default-rtdb.firebaseio.com/keys.json")
    if response.status_code == 200:
        try:
            data = response.json()
            return {
                "access": data.get("access"),
                "refresh": data.get("refresh"),
                "auth": data.get("auth")
            }
        except json.JSONDecodeError as e:  
            print(f"Error decoding JSON: {e}")
            return None
    else:
        print("Erro ao obter dados:", response.status_code, response.text)
        return None

def update_keys(updated_values):
    response = requests.patch("https://bling-2d3ac-default-rtdb.firebaseio.com/keys.json", json=updated_values)
    if response.status_code == 200:
        print("Dados atualizados com sucesso.")
    else:
        print("Erro ao atualizar dados:", response.status_code, response.text)

def obter_token(auth, refresh):
    url = "https://www.bling.com.br/Api/v3/oauth/token"
    credentials = f"{CLIENT_ID}:{CLIENT_SECRET}"
    encoded_credentials = base64.b64encode(credentials.encode()).decode()

    global ACCESS_TOKEN
    global REFRESH_TOKEN

    headers = {
        "Authorization": f"Basic {encoded_credentials}",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    payload = {
        "grant_type": "authorization_code",
        "code": auth,
        "redirect_uri": REDIRECT_URI,
    }

    response = requests.post(url, headers=headers, data=payload)

    if response.status_code == 200:
        token_data = response.json()
        print("Access token obtido com sucesso:", token_data)
        ACCESS_TOKEN = token_data["access_token"]
        REFRESH_TOKEN = token_data["refresh_token"]
        update_keys({
            "access": token_data["access_token"],
            "refresh": token_data["refresh_token"]
        })
    else:
        print("Erro ao obter access token:", response.text)
        get_new_access_token(refresh)  # Usa o refresh token para obter um novo access token

def get_new_access_token(refresh):
    url = "https://www.bling.com.br/Api/v3/oauth/token"
    credentials = f"{CLIENT_ID}:{CLIENT_SECRET}"
    encoded_credentials = base64.b64encode(credentials.encode()).decode()

    global ACCESS_TOKEN
    global REFRESH_TOKEN

    headers = {
        "Authorization": f"Basic {encoded_credentials}",
        "Content-Type": "application/x-www-form-urlencoded",
    }

    payload = {
        "grant_type": "refresh_token",
        "refresh_token": refresh,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET
    }

    response = requests.post(url, headers=headers, data=payload)

    if response.status_code == 200:
        token_data = response.json()
        ACCESS_TOKEN = token_data["access_token"]
        REFRESH_TOKEN = token_data["refresh_token"]
        update_keys({
            "access": token_data["access_token"],
            "refresh": token_data["refresh_token"]
        })
        print("Refresh token obtido com sucesso:", token_data)
    else:
        print("Erro ao obter refresh token:", response.text)

def consultar_relatorios_pagina(pagina):
    global TESTE
    global ACCESS_TOKEN

    limite  = 20 if TESTE else 100
    url = f"https://api.bling.com.br/Api/v3/produtos?pagina={pagina}&limite={limite}"
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json",
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    print("Erro na pagina:",pagina, response.text)
    return None

def consultar_todas_as_paginas():
    pagina = 1
    relatorios_acumulados = []

    while True:
        print('começando pagina', pagina)
        relatorios = consultar_relatorios_pagina(pagina)
        print('terminando pagina', pagina)

        time.sleep(1)

        if relatorios is None: 
            print('relatorios vazios')
            break

        if not relatorios or 'data' not in relatorios or not relatorios['data']:
            print('parado')
            break

        relatorios_acumulados.extend(relatorios['data'])

        if len(relatorios['data']) < 100:
            print('lalallalallala')
            break
        
        print(pagina, len(relatorios['data']))
        pagina += 1
        if TESTE:
            break

    return relatorios_acumulados

def processar_dados(relatorios):
    relatorios_acumulados = []

    tamanho = len(relatorios)
    i = 1
    print('tem numero de relatorios', tamanho)
    for produtos in relatorios:
        produtos_id = produtos.get('id', None)
        if not produtos_id:
            continue

        url = f"https://api.bling.com.br/Api/v3/produtos/{produtos_id}"
        headers = {
            "Authorization": f"Bearer {ACCESS_TOKEN}",
            "Content-Type": "application/json",
        }


        response = requests.get(url, headers=headers)
        
        time.sleep(1)
        print('processou produto id', id, i)
        i +=1

        if response.status_code == 200:
            relatorio = response.json()
            if 'data' in relatorio:
                relatorios_acumulados.append(relatorio)
                

    if len (relatorios_acumulados) > 0:
        return pd.json_normalize(relatorios_acumulados)
    return pd.DataFrame()

tokens = get_keys()
obter_token(tokens['auth'], tokens['refresh'])
print(ACCESS_TOKEN, REFRESH_TOKEN)

relatorios = consultar_todas_as_paginas()
df_final_completo = processar_dados(relatorios) if relatorios else pd.DataFrame()

def tratar_dados(df_final_completo):
    colunas_necessarias = [
    'data.id',
    'data.nome',
    'data.codigo',
    'data.preco',
    'data.estoque.saldoVirtualTotal',
    'data.unidade',
    'data.fornecedor.contato.nome',
    ]


    renomeacao_colunas = {
    'data.id':'Produto_ID',
    'data.nome':'Nome',
    'data.codigo':'Código SKU',
    'data.preco':'Preço',
    'data.estoque.saldoVirtualTotal':'Estoque Virtual',
    'data.unidade':'Unidade',
    'data.fornecedor.contato.nome':'Fornecedor'
    }  

    df_final = df_final_completo[colunas_necessarias]

    df_final = df_final.rename(columns=renomeacao_colunas)

    return df_final
                                                 
if not df_final_completo.empty:
    df_final_produtos = tratar_dados(df_final_completo)
else:
    df_final_produtos = pd.DataFrame()

df_final_produtos




